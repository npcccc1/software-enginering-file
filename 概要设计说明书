
概要设计说明书
《课堂考勤系统》  
“我带你们打组”                        
















编写日期：2019/10/26
 
项目组：
学号	姓名	角色
092324	王同学	组长
071409	徐同学	组员
071324	吕同学	组员
062609	叶同学	组员

 
修改日志
修改者	修改日期	备注说明
		目前还未具体设计暂无修改
		
		
		
		
		
		
		
		
		



 
目 录
1.	引言	5
1.1	编写目的	5
1.2	定义	5
1.3	参考资料	5
2.	范围	5
2.1	系统主要目标	5
2.2	主要软件需求	5
2.3	设计约束、限制	5
3.	软件系统结构设计	5
3.1	软件体系结构	5
3.1.1	软件程序结构图	5
3.1.2	模块描述	5
3.2	功能需求追溯	6
4.	数据设计	6
5.	接口设计	6
5.1	用户界面设计规则	6
5.2	内部接口设计	6
5.3	外部接口设计	6
6.	出错处理设计	6

 
1.	引言
1.1	编写目的
初期确定项目的主要功能以及项目的大概大小和面向的主要对象。
预期读者为组内成员以及客户。
1.2	定义
暂未涉及专业术语方面（可能在后期涉及中会用到）
1.3	参考资料
《c++面向对象程序设计》-郑莉-ISBN 978-7-302-22798-4  第四版
《现代软件工程构建之法》-邹欣-ISBN 978-7-115-46076-9 2017年7月第三版
（以上为暂定后期可能有补充）
2.	范围
《需求规格说明书.》暂时未作出更改，后期更改后会有补充。
2.1	系统主要目标
具有一个课堂考勤系统的基本功能并且在其中加入我们队自己的理解与特色化功能，旨在给广大师生带来更加舒适与方便的课堂考勤体验。
2.2	主要软件需求
1：老师能对参见考勤的课程进行管理
2：能对参加考勤的学生进行管理
3：能对上课缺席的学生进行登记记录
3：学生能知道自己的缺课情况
4：学生能查看自己的课程信息
5：能够支持各种上课签到方式
（以上功能暂定，后期可能会有具体的增加或者改变）
2.3	设计约束、限制
1：时间约束：时间暂定在4周以内完成
2：资金约束：目前基本无资金投入（用爱发电）
3：技术约束：队内队长和别的队友能力较强，会至少两种及以上的编程语言并能熟练进行使用，我（吕同学）的个人能力则较弱，所以负责比较简单的部分，经过商讨后决定采用原型来设计。
4：人员约束：队内一共四个人，人力资源并不是很充足，部分知识大家都不会，但是基本类容还是能够满足。
3.	软件系统结构设计
3.1	软件体系结构
利用变换分析方法将DFD映射为软件结构（如基于DFD或基于IDEF0　的结构设计），并采用适当的优化准则进行软件结构的优化。
已得到优化的软件体系结构用结构图（Structure Chart）进行描述。描述的内容包括：

3.1.1	软件程序结构图
画出软件体系结构的树状层次。
 

3.1.2	模块描述
因为采用原型设计所以不涉及模块知识
3.2	功能需求追溯
因为采用原型设计所以不涉及模块知识
4.	数据设计
采用原型设计不涉及数据库知识
5.	接口设计
5.1	用户界面设计规则
分析《需求规格说明书》中的用户特点，设计交互、信息显示和数据输入等用户界面规则。若有的话，列出用户的强制标准和开发单位的强制标准。
1：用户主要面向学生与教师所以界面设计尽量简洁明了去除华而不实的界面图片
2：界面设计需要有较强的交互性，并且易于理解与使用
3：能够提供有实际意义的反馈
4：尽量简洁，减少动作间必须记忆的信息数量
5：提供不同的语种支持
6：在执行有较大破坏性的操作前需要用户二次确认（例如数据的修改）
7：界面只显示与用户有关的信息
8：使用一致的颜色与字号，显示意义应当明确且尽量少涉及专业名词，用户不再采用其他信息源
9：尽量减少用户需要输入的信息量
10：提供新手教程
11：让用户可以选择跳过一些不必要的步骤
12：布局简洁明了，易于操作。
13：信息已用户可以理解的语言描述
13：字体，空行以及输入应该在所有的页面都遵循相同的规范
14：所有的图标大小均使用同一个规范，不要过大，也不宜过小。
5.2	内部接口设计
采用原型设计暂无接口
5.3	外部接口设计
采用原型设计暂无接口
6.	出错处理设计
1：出错信息出现时必须转换成简单易懂的语言，尽量不涉及专业术语。
2：出错信息应该伴随视觉或者听觉上的提示，例如可以设置提示音或者说将界面变得闪烁
3：提示语句应该和善，不能带有批判用户的色彩
4：应该给出错误的原因并且引导用户进行修复
5：在适当的时候应该给出开发人员的联系方式方便反应相关的问题或者bug。
6：应该在适当的时候向用户发出调查问卷，隔一段时间收集一次用户的反馈信息。
7：加入数据复审的功能，在最大程度上减少程序报错的发生。

